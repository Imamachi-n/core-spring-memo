(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{158:function(t,e,i){"use strict";i.r(e);var o=i(0),a=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"aspect-oriented-programming"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aspect-oriented-programming","aria-hidden":"true"}},[t._v("#")]),t._v(" Aspect oriented programming")]),t._v(" "),i("h2",{attrs:{id:"aopとは"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aopとは","aria-hidden":"true"}},[t._v("#")]),t._v(" AOPとは")]),t._v(" "),i("p",[t._v("横断的関心事（Cross-cutting concerns）のモジュール化。横断的関心事とは、いろいろなところで必要な機能のことで、いつも同じように書く内容のもの。")]),t._v(" "),i("p",[t._v("例えば、")]),t._v(" "),i("ul",[i("li",[t._v("ログ出力")]),t._v(" "),i("li",[t._v("セキュリティ")]),t._v(" "),i("li",[t._v("キャッシュ")]),t._v(" "),i("li",[t._v("トランザクション")]),t._v(" "),i("li",[t._v("例外処理")])]),t._v(" "),i("p",[t._v("常にメソッドが呼び出される前にRoleに基づくセキュリティチェックが行われる、などのように"),i("code",[t._v("いつも")]),t._v("や"),i("code",[t._v("常に")]),t._v("がキーワードが使われる操作はAOPの対象となる。")]),t._v(" "),i("h2",{attrs:{id:"aopがなかったら"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aopがなかったら","aria-hidden":"true"}},[t._v("#")]),t._v(" AOPがなかったら")]),t._v(" "),i("p",[t._v("ビジネスロジック内にログ出力やセキュリティチェックの処理が入り込み、コードが見にくくなる。")]),t._v(" "),i("ul",[i("li",[t._v("コードのもつれ（Code tangling）: 複数の処理が絡み合っている状態")]),t._v(" "),i("li",[t._v("コードの散らばり（Code scattering）: 同じ処理がいろいろな箇所に散らばっている状態")])]),t._v(" "),i("h2",{attrs:{id:"wip-積み残し課題"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#wip-積み残し課題","aria-hidden":"true"}},[t._v("#")]),t._v(" [WIP] 積み残し課題")]),t._v(" "),i("ul",[i("li",[t._v("What is the concept of AOP? Which problem does it solve? What is a cross cutting concern?")]),t._v(" "),i("li",[t._v("Name three typical cross cutting concerns.")]),t._v(" "),i("li",[t._v("What two problems arise if you don't solve a cross cutting concern via AOP?")]),t._v(" "),i("li",[t._v("What is a pointcut, a join point, an advice, an aspect, weaving?")]),t._v(" "),i("li",[t._v("How does Spring solve (implement) a cross cutting concern?")]),t._v(" "),i("li",[t._v("Which are the limitations of the two proxy-types?")]),t._v(" "),i("li",[t._v("What visibility must Spring bean methods have to be proxied using Spring AOP?")]),t._v(" "),i("li",[t._v("How many advice types does Spring support. Can you name each one?")]),t._v(" "),i("li",[t._v("What are they used for?")]),t._v(" "),i("li",[t._v("Which two advices can you use if you would like to try and catch exceptions?")]),t._v(" "),i("li",[t._v("What do you have to do to enable the detection of the @Aspect annotation?")]),t._v(" "),i("li",[t._v("What does @EnableAspectJAutoProxy do?")]),t._v(" "),i("li",[t._v("If shown pointcut expressions, would you understand them?")]),t._v(" "),i("li",[t._v("For example, in the course we matched getter methods on Spring Beans, what would be the correct pointcut expression to match both getter and setter methods?")]),t._v(" "),i("li",[t._v("What is the JoinPoint argument used for?")]),t._v(" "),i("li",[t._v("What is a ProceedingJoinPoint? When is it used?")])])])}],!1,null,null,null);a.options.__file="2_aop.md";e.default=a.exports}}]);